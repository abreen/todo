#! /bin/bash

## todo - A tool to help you do
## Copyright 2011-2012 Alexander Breen
## alexanderbreen.com

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

# You're allowed to change these
file_location=~/todo         # Location of your todo file
max_length=10                # Maximum length of list; set this to 0 for no pagination

# Unless you're adventurous, don't change anything below this

# Error/info strings
es_dont_know="Not sure what you mean"
es_nothing_todo="Nothing to do. Hooray!"
es_sure="Are you sure? (Y/n)"
es_added="Added."
es_amended="Amended."
es_removed="Removed."
es_cancelled="Cancelled."
es_underflow="The todo list file is already empty"
es_created="Created empty todo list file "
es_creation_failed="Could not create empty todo list file "
es_permissions_ask="Do you have the proper permissions?"
es_not_readable=" is unreadable"
es_specify="Specify a todo to act on"
es_need_title="Todos must not be empty"
es_argument_expected="Expected an action but got none"
es_nonexistent="That todo doesn't exist"
es_amending="Will be amended to:"
es_amend_failed="Failed editing todo list file"

# Globals
action=$1
token="$2"

# Kill the script if something goes wrong
set -e

# Initialize the script, check for dependencies
function init() {
  # We need sed
  if [ ! $(which sed) ]; then
    echo "todo: You must have 'sed' installed" >&2
    exit 1
  fi
}

# Print all lines of the todo file with line numbers
function catwithnum() {
  if [ "$1" = "all" ]; then
    awk '{print FNR ". " $0}' $file_location  
    return 0
  else
    if [ "$max_length" = 0 ]; then
      catwithnum all
      return 0
    else
      awk '{ if (NR <= '$max_length') { print FNR ". " $0 } }
         END { if (NR > '$max_length') { print "'$max_length' of " NR " todos printed. Use \"todo list all\" to see all " NR "." } }' $file_location
      return 0
    fi
  fi
}

# Returns 0 if non-empty, 1 if empty
function empty() {
  if [ "$(cat $file_location)" = "" ]; then
    return 0
  else
    return 1
  fi
}

# Returns 0 if an arbitrary argument was supplied, and
# 1 otherwise
function token() {
  if [ "$token" != "" ]; then
    return 0
  else
    return 1
  fi
}

# Returns 0 if the todo file exists and is readable; makes
# an effort to create the file if it does not exist
function checkread() {
  if [ -f $file_location ] && [ -r $file_location ]; then
    return 0
  else
    if [ ! -f $file_location ]; then
      touch $file_location > /dev/null 2>&1
      if [ "$?" = "0" ]; then
        echo "$es_created$file_location"
        return 0
      else
        echo "todo: $es_creation_failed$file_location" >&2
        echo $es_permissions_ask
        return 1
      fi
    fi
    if [ ! -r $file_location ]; then
      echo "todo: $file_location$es_not_readable" >&2
      echo $es_permissions_ask
      return 1
    fi
  fi
}

function help() {
  echo -e "Usage: \033[1mtodo\033[22m \033[1mlist\033[22m [\033[1mall\033[22m] | \033[1madd\033[22m \033[4mstring\033[24m | \033[1mremove\033[22m \033[4m#\033[24m | \033[1mamend\033[22m \033[4m#\033[24m | \033[1mhelp\033[22m | \033[1mabout\033[22m" >&2
}

function longhelp() {
  echo -e "\033[1mtodo\033[22m +"
  echo -e "  \033[1mlist\033[22m [\033[1mall\033[22m]\tList your todos"
  echo -e "  \033[1madd\033[22m \033[4mstring\033[24m\tAdd a todo" 
  echo -e "  \033[1mremove\033[22m \033[4m#\033[24m\tRemove a todo" 
  echo -e "  \033[1mamend\033[22m \033[4m#\033[24m\tAmend an exisiting todo" 
  echo -e "  \033[1mhelp\033[22m\t\tPrint this screen" 
  echo -e "  \033[1mabout\033[22m\t\tGet to know the author" 
}

function about() {
  echo "todo - A tool to help you do"
  echo "by Alexander Breen (abreen@bu.edu)"
  echo "v1.0 (Aug 8 2012)"
}

# Performs the standard "todo list" function
function list() {
  # Can we read the todo list file?
  if checkread; then
    if ! empty; then
      # catwithnum() handles abnormally long lists
      catwithnum $token
      exit 0
    else
      echo $es_nothing_todo
      exit 0
    fi
  else
    exit 1
  fi
}

# Tries to append a new todo to the todo file
function add() {
  # Was an arbitrary argument supplied?
  if token; then
    # Append the argument to the end of the file
    echo "$token" >> $file_location
    # Tell the user we've added the todo
    echo $es_added
    # ...also include a preview of that todo item
    catwithnum all | tail -n 1
    exit 0
  else
    # No token argument
    echo "todo: $es_need_title" >&2
    help
    exit 1
  fi
}

# Checks if a specified todo really exists
function check_existence() {
  len=$(cat "$file_location" | wc -l)
  if [ $1 -gt $len ]; then
    echo "todo: $es_nonexistent" >&2
    exit 1
  else
    if [ $1 -lt 1 ]; then
      echo "todo: $es_nonexistent" >&2
      exit 1
    fi
  fi
}

# Unceremoniously kills a line from the todo file
function kill_line() {
  if [ -z $1 ]; then
    return 1
  fi
  
  sed -i "$1""d" $file_location
}

# Attempts to amend an existing todo
function amend() {
  if token; then
    check_existence $token
    
    # Ask to amend the todo
    catwithnum | head -n "$token" | tail -n 1
    echo "$es_amending"
    echo -n "$token. "
    read response
    
    sed -i """$token"c\\"$response""" $file_location
    
    if [ "$?" = 0 ]; then
      echo "$es_amended"
      exit 0
    else
      echo "todo: $es_amend_failed" >&2
      exit 1
    fi
    
  else
    echo "todo: $es_specify" >&2
    help 
  fi
}

# Attempts to remove the todo at a specified line
function remove() {
  # If the file is empty, we should break early
  if empty; then
    echo "todo: $es_underflow" >&2
    exit 1
  fi
  
  # Check to see if we were given an argument
  if token; then
    check_existence $token
  
    catwithnum all | head -n $token | tail -n 1
    echo -n "$es_sure "
    read response
    
    if [ "$response" == "Y" ]; then
      kill_line $token
      echo $es_removed
      exit 0
    else
      echo $es_cancelled
      exit 0
    fi
  else
    # No token argument
    echo "todo: $es_specify" >&2
    help
    exit 1
  fi
}

init
case "$action" in
'') echo "todo: $es_argument_expected" >&2
    help ;;
'help') longhelp ;;
'--help') longhelp ;;
'-h') longhelp ;;
'about') about ;;
'list') list ;;
'add') add ;;
'amend') amend ;;
'remove') remove ;;
*) echo "todo: $es_dont_know" >&2
   help
   ;;
esac
