#! /bin/bash

# todo - A tool to help you do
# Copyright 2011-2013 Alexander Breen (abreen@bu.edu)

# You're allowed to change these
FILE_LOCATION=~/todo         # Location of your todo file
MAX_LENGTH=4                # Max. todos to display at once; set this to 0
                             # for no pagination

# Unless you're adventurous, don't change anything below this

# Globals
action=$1
token="$2"

# Kill the script if something goes wrong
set -e

# Print all lines of the todo file with line numbers
function print_with_numbers() {
  awk '{ print FNR ". " $0 }' "$FILE_LOCATION"
  return 0
}

# Returns 0 if non-empty, 1 if empty
function empty() {
  if [ "$(cat $FILE_LOCATION)" = "" ]; then
    return 0
  else
    return 1
  fi
}

# Returns 0 if an arbitrary argument was supplied, and 1 otherwise
function token() {
  if [ "$token" != "" ]; then
    return 0
  else
    return 1
  fi
}

# Creates the todo list file
function create_file() {
  if [ ! -f "$FILE_LOCATION" ]; then
    touch "$FILE_LOCATION" > /dev/null 2>&1
    if [ "$?" = "0" ]; then
      echo "Created empty todo list file $FILE_LOCATION."
      return 0
    else
      echo "$0: Could not create empty todo list file $FILE_LOCATION." >&2
      return 1
    fi
  fi

  if [ ! -r "$FILE_LOCATION" ]; then
    echo "$0: $FILE_LOCATION is not readable." >&2
    return 1
  fi
}

function usage() {
  echo -e "Usage: \033[1m$0\033[22m \033[1mlist\033[22m [\033[1mall\033[22m] | \033[1madd\033[22m \033[4mstring\033[24m | \033[1mremove\033[22m \033[4m#\033[24m | \033[1mamend\033[22m \033[4m#\033[24m | \033[1mhelp\033[22m | \033[1mabout\033[22m" >&2
}

function help() {
  echo -e "\033[1mtodo\033[22m +"
  echo -e "  \033[1mlist\033[22m\t\tList your todos"
  echo -e "  \033[1madd\033[22m \033[4mstring\033[24m\tAdd a todo" 
  echo -e "  \033[1mremove\033[22m \033[4m#\033[24m\tRemove a todo" 
  echo -e "  \033[1mamend\033[22m \033[4m#\033[24m\tAmend an exisiting todo" 
  echo -e "  \033[1mhelp\033[22m\t\tPrint this screen" 
  echo -e "  \033[1mabout\033[22m\t\tGet to know the author" 
}

function about() {
  echo "todo - A tool to help you do"
  echo "by Alexander Breen (abreen@bu.edu)"
  echo "v1.1 (Apr 6 2013)"
}

# Performs the standard "todo list" function
function list() {
  if [ -f "$FILE_LOCATION" ] && [ -r "$FILE_LOCATION" ]; then
    if ! empty; then
      print_with_numbers $token
      exit 0
    else
      echo "Nothing to do. Hooray!"
      exit 0
    fi
  else
    create_file
  fi
}

# Tries to append a new todo to the todo file
function add() {
  # Was an arbitrary argument supplied?
  if token; then
    # Append the argument to the end of the file
    echo "$token" >> "$FILE_LOCATION"
    # Tell the user we've added the todo
    echo "Added."
    exit 0
  else
    # No token argument
    echo "$0: Expected a todo title but got none." >&2
    usage
    exit 1
  fi
}

# Checks if a specified todo really exists
function check_existence() {
  len=$(cat "$FILE_LOCATION" | wc -l)
  if [ $1 -gt $len ]; then
    echo "$0: The specified todo doesn't exist." >&2
    exit 1
  else
    if [ $1 -lt 1 ]; then
      echo "$0: Provide a todo number greater than zero!" >&2
      exit 1
    fi
  fi
}

# Unceremoniously kills a line from the todo file
function kill_line() {
  if [ -z $1 ]; then
    return 1
  fi
  
  sed -i "$1""d" "$FILE_LOCATION"
}

# Attempts to amend an existing todo
function amend() {
  if token; then
    check_existence $token
    
    # Ask to amend the todo
    print_with_numbers | head -n "$token" | tail -n 1
    echo "Will be amended to..."
    echo -n "$token. "
    read response
    
    sed -i """$token"c\\"$response""" "$FILE_LOCATION"
    
    if [ "$?" = 0 ]; then
      echo "Amended."
      exit 0
    else
      echo "$0: Could not amend the todo file." >&2
      exit 1
    fi
    
  else
    echo "$0: Expected a todo number but got none." >&2
    usage
  fi
}

# Attempts to remove the todo at a specified line
function remove() {
  # If the file is empty, we should break early
  if empty; then
    echo "$0: The todo list file is already empty." >&2
    exit 1
  fi
  
  # Check to see if we were given an argument
  if token; then
    check_existence $token
  
    print_with_numbers all | head -n $token | tail -n 1
    echo -n "Are you sure? (Y/n): "
    read response
    
    if [ "$response" == "Y" ]; then
      kill_line $token
      echo "Removed."
      exit 0
    else
      echo "Canceled."
      exit 0
    fi
  else
    # No token argument
    echo "$0: Expected a todo number but got none." >&2
    usage
    exit 1
  fi
}

case "$action" in
'') list ;;
'help') help ;;
'--help') help ;;
'-h') help ;;
'about') about ;;
'list') list ;;
'add') add ;;
'amend') amend ;;
'remove') remove ;;
*) echo "$0: Not sure what '$action' means." >&2
   usage
   exit 1
   ;;
esac
