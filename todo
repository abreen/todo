#! /bin/bash

## todo - A tool to help you do
## Copyright 2011-2012 Alexander Breen
## alexanderbreen.com

## This program is free software: you can redistribute it and/or modify
## it under the terms of the GNU General Public License as published by
## the Free Software Foundation, either version 3 of the License, or
## (at your option) any later version.
## 
## This program is distributed in the hope that it will be useful,
## but WITHOUT ANY WARRANTY; without even the implied warranty of
## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
## GNU General Public License for more details.
## 
## You should have received a copy of the GNU General Public License
## along with this program.  If not, see <http://www.gnu.org/licenses/>.

# You're allowed to change these
file_location=~/todo   # Location of your todo file

# Unless you're adventurous, don't change anything below this

# Error/info strings
es_dont_know="Sorry, I'm not sure what you mean."
es_nothing_todo="Nothing to do. Hooray!"
es_added="Added."
es_sure="Are you sure? (Y/n)"
es_removed="Removed."
es_cancelled="Cancelled."

# Globals
action=$1
token="$2"

# Kill the script if something goes wrong
set -e

# Print all lines of the todo file with line numbers
function catwithnum() {
  if [ "$1" = "all" ]; then
    awk '{print FNR ". " $0}' $file_location  
    return 0
  else
    # Catch long todo lists
    awk '{ if (NR < 11) { print FNR ". " $0 } }
         END { if (NR > 10) { print "10 of " NR " todos printed. Use \"todo list all\" to see all " NR "." } }' $file_location
    return 0
  fi
}

# Returns 0 if non-empty, 1 if empty
function empty() {
  if [ "$(cat $file_location)" = "" ]; then
    return 0
  else
    return 1
  fi
}

# Returns 0 if an arbitrary argument was supplied, and
# 1 otherwise
function token() {
  if [ "$token" != "" ]; then
    return 0
  else
    return 1
  fi
}

# Returns 0 if the todo file exists and is readable; makes
# an effort to create the file if it does not exist
function checkread() {
  if [ -f $file_location ] && [ -r $file_location ]; then
    return 0
  else
    if [ ! -f $file_location ]; then
      touch $file_location
      if [ "$?" = "0" ]; then
        echo "Created empty todo list file $file_location."
        return 0
      else
        echo "Could not create empty todo list file $file_location."
        return 1
      fi
    fi
    if [ ! -r $file_location ]; then
      echo "Can't continue: $file_location is unreadable."
      return 1
    fi
  fi
}

function help() {
  echo "todo + ..."
  echo -e "list\tadd\tremove\thelp\tabout"
}

function longhelp() {
  echo "todo - A tool to help you do"
  echo -e "todo\t[action]\t[argument]"
  echo -e "todo\tlist\t\t\t\tlists your todos"
  echo -e "todo\tadd\t\t(string)\tadds a todo with title"
  echo -e "todo\tremove\t\t(num)\t\tremove a certain todo"
  echo -e "todo\tabout\t\t\t\tdisplay credit and version information"
  echo -e "todo\thelp\t\t\t\tdisplay this screen"
}

function about() {
  echo "todo - A tool to help you do"
  echo "by Alexander Breen (abreen@bu.edu)"
  echo "v0.3 (Jul 12 2012)"
}

# Performs the standard "todo list" function
function list() {
  # Can we read the todo list file?
  if checkread; then
    if ! empty; then
      # catwithnum() handles abnormally long lists
      catwithnum $token
      exit 0
    else
      echo $es_nothing_todo
      exit 0
    fi
  else
    exit 1
  fi
}

# Tries to append a new todo to the todo file
function add() {
  # Was an arbitrary argument supplied?
  if token; then
    # Append the argument to the end of the file
    echo "$token" >> $file_location
    # Tell the user we've added the todo
    echo $es_added
    # ...also include a preview of that todo item
    catwithnum all | tail -n 1
    exit 0
  else
    # No token argument
    echo "Todos must have titles."
    echo "todo + add + \"Remember the milk\""
    exit 1
  fi
}

# Attempts to remove the todo at a specified line
function remove() {
  # If the file is empty, we should break early
  if empty; then
    echo "Can't remove something from nothing."
    exit 1
  fi
  
  # Check to see if we were given an argument
  if token; then
    # Should be doing error-checking here

    catwithnum all | head -n $token | tail -n 1
    echo -n "$es_sure "
    read response
    
    if [ "$response" == "Y" ]; then
      kill_line=$((token))
      sed "$kill_line"d"" $file_location > "$file_location"~
      # Using a temporary file to hold the results
      cat "$file_location"~ > $file_location   # Replacing
      rm "$file_location"~   # Delete temporary file
      echo $es_removed
      exit 0
    else
      echo $es_cancelled
      exit 0
    fi
  else
    # No token argument
    echo "Which item shall I remove?"
    exit 1
  fi
}

# There's a better way to do this, but my 2 AM brain
# doesn't want to realize

case "$action" in
'') help ;;
'help') longhelp ;;
'--help') longhelp ;;
'about') about ;;
'list') list ;;
'add') add ;;
'remove') remove ;;
*) echo $es_dont_know
   help
   ;;
esac
